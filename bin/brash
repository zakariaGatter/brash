#!/usr/bin/env bash

#--------#
# DEBUG  #
#--------#{{{
#set -xv
#}}}

#-------------#
# SCRIPT NAME #
#-------------#{{{
# Get the script name even if u change it
_name_=${0##*/}
#}}}

#----------------#
# TARSH LOCATION #
#----------------#{{{
# get Trash variable from Devices
while read -r d ; do

	# get partition
	read -ra U < <(blkid $d)

	# check if the partition mounted
	read -ra D < <(lsblk -ln -o mountpoint $d)

	# get partition UUID
	eval "${U[1]}"

	# if UUID empty its a external disk or a usb
	[ "$UUID" ] && {
		# if can find UUID id not a system Partititon
		# and check if its mounted
		[ -z "$(grep "$UUID" /etc/fstab)" ] && [ "${D}" ] && {
			case "$PWD" in
				${D}* ) _TRASH_="$D/.Trash" ;;
			esac
		}
	}
done < <(ls -1 /dev/sd[a-z][1-9])
#}}}

#---------------#
# TRASH FOLDERS #
#---------------#{{{
_TRASH_=${_TRASH_:=$HOME/.local/share/Trash}
_TFILES_="$_TRASH_/files"
_TINFO_="$_TRASH_/info"
#}}}

#------------------#
# MAKE TRASH FILES #
#------------------#{{{
_mk_trash_(){
	[ -d "$_TFILES_" ] || mkdir -p "$_TFILES_"
	[ -d "$_TINFO_" ] || mkdir -p "$_TINFO_"
}
#}}}

#-------------#
# MSG DIALOG  #
#-------------#{{{
_msg_(){ ( >&2 printf "%s: %s\n" "${_name_^}" "$1" ) ;}
#}}}

#-----------#
# ERROR MSG #
#-----------#{{{
_er_(){ ( >&2 printf "%s: %s\n" "${_name_^}" "$1" ) ; exit 2 ;}
#}}}

#-------------#
# REMOVE FILE #
#-------------#{{{
_remove_(){
local i I

for i in "${_list_[@]:$F}" ; do
	local _file_=${i}
	local _path_=$(realpath -- "$_file_" 2> /dev/null)
	local _file_name_=${_path_##*/}
	local _file_path_=${_path_%/*}
    local size count

    # check for file existing
    [ -e "$_file_" ] || _er_ "$_file_: No such file or Directory."

    # get file size
    read -a size < <(du -hc "$_file_" 2> /dev/null)

    # get count if there is any double
    read count < <(ls -1 $_TFILES_/${_file_name_}* 2> /dev/null | sort -V | awk -F '[()]' '{line=$2}END{print line}')

    [ "$count" ] && {
        ((count++))
        _file_name_="${_file_name_}(${count})"
    } || {
        [ -e "$_TFILES_/$_file_name_" ] && _file_name_="${_file_name_}(1)"
    }

    test -w "$_file_" || _er_ "Can't Delete '$_file_' Permission denied"

    ( mv -f -- "$_file_" "$_TFILES_/$_file_name_" 2> /dev/null ) && {
        printf "[Trash Info]\n"                    > "$_TINFO_/$_file_name_.trashinfo"
        printf "DeletionDate=%(%F)TT%(%T)T\n"     >> "$_TINFO_/$_file_name_.trashinfo"
        printf "PATH=%s\n" "$_file_path_/$_file_" >> "$_TINFO_/$_file_name_.trashinfo"
    } || {
        _er_ "Delele [ERROR] '$_file_'"
    }

    [ "$_VERBOSE_" ] && _msg_ "Delete [$size] '$_file_'"
done
}
#}}}

#------------#
# LIST FILES #
#------------#{{{
_list_(){
(ls $_TINFO_/* &> /dev/null) || _er_ "Trash [EMPTY]"

for i in $_TINFO_/* ; do
	local _file_=$(awk -F = '/^PATH=/{print $2}' "$i")
	local _date_=$(awk -F = '/^DeletionDate=/{sub("T"," ",$2); print $2}' "$i")

    _msg_ "List [$_date_] '$_file_'"
done
}
#}}}

#-------------#
# CLEAN TRASH #
#-------------#{{{
_clean_(){
(ls $_TINFO_/* &> /dev/null) || _er_ "Trash [EMPTY]"

_msg_ "Clean [INFO]"
rm -rf -- $_TINFO_/*

_msg_ "Clean [FILE]"
rm -rf -- $_TFILES_/*

}
#}}}

#------------------------------#
# LIST FILES FOR BRASH RETORE  #
#------------------------------#{{{
_list_files_(){
for i in $_TINFO_/* ; do
	local _file_=$(awk -F = '/^PATH=/{print $2}' "$i")
	local _date_=$(awk -F = '/^DeletionDate=/{sub("T"," ",$2); print $2}' "$i")
	i=${i##*/}
    printf "'%s' '%s' OFF " "${i%.*}" "$_file_ $_date_"
done
}
#}}}

#--------------#
# RESTORE FILE #
#--------------#{{{
_restore_(){
(ls $_TINFO_/* &> /dev/null) || _er_ "Trash [EMPTY]"

read LINES COLUMNS < <(stty size)

_RF_="${_list_[@]:$F}"

[ "$_RF_" ] || {
	DIALOG_TTY=1
	_RF_=$(eval "dialog --stdout --title 'Brash Restore' --checklist 'Pick Files (Accept Multiple) :' $LINES $COLUMNS $(($LINES - 8)) $(_list_files_)")
}

[ "$_RF_" ] && {
	for i in ${_RF_[@]}; do
		local _file_=$(awk -F = '/^PATH=/{print $2}' "$_TINFO_/$i.trashinfo")

        test -w "$_TINFO_/$i" || _er_ "Can't Restore '$_file_' Permission denied"

        test -f "$_file_" && _file_="${_file_}(1)"

		mv -f -- "$_TFILES_/$i" "$_file_" 2> /dev/null
        rm -f -- "$_TINFO_/$i.trashinfo"  2> /dev/null

		[ "$_VERBOSE_" ] && _msg_ "Restore '$_file_'"
	done
}
}
#}}}

#-------------#
# TRASH SIZE  #
#-------------#{{{
_size_(){
    local size count

    read size < <(du -hc "$_TRASH_"/* | awk '/total$/{print $1}')
    read count < <(ls -1 "$_TRASH_"/* | wc -l)

    _msg_ "Size [$size], Files [$count]"
}
#}}}

#-------------#
# HELP DIALOG #
#-------------#{{{
_help_(){
cat <<- HELP
${_name_^^} Cli Trash Manager in bure Bash

$_name_ [OPTS] [FILES]

OPTS :
  -d : Delete File and Directories
  -c : Clean Trash Files and Infos
  -l : List Trash Files
  -r : Restore Files from trash
  -s : Trash Size
  -v : Explain what is being done
  -h : Display this help text and exit
HELP

exit 0
}
#}}}

#---------------#
# MAIN FUNCTION #
#---------------#{{{
_main_(){
while getopts "dlcrsvh" OPT ; do
    case "$OPT" in
        d )
            _mk_trash_
            _REMOVE_=true
            ;;
        l )
            _LIST_=true
            ;;
        c )
            _CLEAN_=true
            ;;
        r )
            _RESTORE_=true
            ;;
        s )
            _SIZE_=true
            ;;
        h )
            _help_
            ;;
        v )
            _VERBOSE_=true
            ;;
        * )
            _er_ "invalid option -- '$OPTARG'\nTry '${_name_} -h' for more information"
            ;;
    esac

    F=$((OPTIND-1))
done
}
#}}}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#{{{
# this the only way i found to deal with spaces inside filename
for i in "$@"; { _list_+=( "$i" ) ;}
_main_ $@
#}}}

#---------------#
# DETECT ERRORS #
#---------------#{{{
[ "$_VERBOSE_" ] && _all_=2   || _all_=1
[ "$_REMOVE_" ]  && _remove_  || true
[ "$_LIST_" ]    && _list_    || true
[ "$_CLEAN_" ]   && _clean_   || true
[ "$_RESTORE_" ] && _restore_ || true
[ "$_SIZE_" ]    && _size_    || true
#}}}

