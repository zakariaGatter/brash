#!/usr/bin/env bash

#-------------#
# SCRIPT NAME #
#-------------#{{{
# Get the script name even if u change it
_name_=${0##*/}
#}}}

#----------------#
# TARSH LOCATION #
#----------------#{{{
# get Trash variable from Devices
while read -r d ; do

	# ignore system partition
	read -ra U < <(blkid $d)

	# check if the partition mounted
	read -ra D < <(lsblk -ln -o mountpoint $d)

	# get partition UUID
	eval "${U[1]}"

	# if UUID empty its a external disk or a usb
	[ -z "$UUID" ] || {

		# if can find UUID id not a system Partititon
		# and check if its mounted
		[ -z "$(grep "$UUID" /etc/fstab)" -a -n "${D}" ] && {
			case "$PWD" in
				${D}* )
						_TRASH_="$D/.Trash"
					;;
			esac
		}
	}
done < <(\ls /dev/sd[a-z][1-9])
#}}}

#---------------#
# TRASH FOLDERS #
#---------------#{{{
_TRASH_=${_TRASH_:=$HOME/.local/share/Trash}
_TFILES_="$_TRASH_/files"
_TINFO_="$_TRASH_/info"
#}}}

#------------------#
# MAKE TRASH FILES #
#------------------#{{{
_mk_trash_(){
	[ -d "$_TFILES_" ] || \mkdir -p "$_TFILES_"
	[ -d "$_TINFO_" ] || \mkdir -p "$_TINFO_"
}
#}}}

#-------------#
# MSG DIALOG  #
#-------------#{{{
_msg_(){ ( >&2 printf "%s\n" "$1" ) ;}
#}}}

#-------------#
# REMOVE FILE #
#-------------#{{{
_remove_(){
local i I

for i in "${_list_[@]:$_all_}" ; do
	local _file_=${i}
	local _path_=$(realpath "$_file_")
	local _file_name_=${_path_##*/}
	local _file_path_=${_path_%/*}
    local size

    # get file size
    read -a size < <(du -hc "$_file_")

	# check if there is any file with the same name
	for I in $_TFILES_/${_file_name_}.{1..100}; do
		[ -e "$_TFILES_/${I##*/}" ] && local _file_double_="${I##*/}"
	done

	[ -z "$_file_double_" ] || local _d_="true"

	# make file with numbers
	if [ -e "$_TFILES_/$_file_double_" -a "$_d_" = "true" ]; then
		local _num_=${_file_double_##*_}
		((_num_++))
		_file_name_="${_file_double_%_*}.${_num_}"
	elif [ -e "$_TFILES_/$_file_name_" ]; then
		_file_name_="${_file_name_}.1"
	fi

	if [ -e "$_file_" ]; then
        ( \mv -fi "$_file_" "$_TFILES_/$_file_name_" ) && {
            printf "[Trash Info]\n"                   > "$_TINFO_/$_file_name_.trashinfo"
            printf "DeletionDate=%(%F)TT%(%T)T\n"     >> "$_TINFO_/$_file_name_.trashinfo"
            printf "PATH=%s\n" "$_file_path_/$_file_" >> "$_TINFO_/$_file_name_.trashinfo"
        } || {
            _msg_ "${_name_^} Delele [ERROR] '$_file_'"
            exit 2
        }

		[ "$_VERBOSE_" = "true" -a "$?" -eq "0" ] && _msg_ "${_name_^} Del [$size] '$_file_'"
	else
		_msg_ "${_name_^}: $_file_: No such file or Directory."
        exit 2
	fi
done
}
#}}}

#------------#
# LIST FILES #
#------------#{{{
_list_(){
(\ls $_TINFO_/* &> /dev/null) || {
	_msg_ "${_name_^}: Trash [EMPTY]"
   exit 2
}

for i in $_TINFO_/* ; do
	local _file_=$(awk -F = '/^PATH=/{print $2}' "$i")
	local _date_=$(awk -F = '/^DeletionDate=/{sub("T"," ",$2); print $2}' "$i")

    _msg_ "${_name_^} List [$_date_] '$_file_'"
done
}
#}}}

#-------------#
# CLEAN TRASH #
#-------------#{{{
_clean_(){
(\ls $_TINFO_/* &> /dev/null) || {
    _msg_ "${_name_^}: Trash [EMPTY]"
   exit 2
}

_msg_ "${_name_^}: Clean [INFO]"
\rm -rf $_TINFO_/*

_msg_ "${_name_^}: Clean [FILE]"
\rm -rf $_TFILES_/*

}
#}}}

#------------------------------#
# LIST FILES FOR BRASH RETORE  #
#------------------------------#{{{
_list_files_(){
for i in $_TINFO_/* ; do
	local _file_=$(awk -F = '/^PATH=/{print $2}' "$i")
	local _date_=$(awk -F = '/^DeletionDate=/{sub("T"," ",$2); print $2}' "$i")
	i=${i##*/}
    printf "'%s' '%s' OFF " "${i%.*}" "$_file_ $_date_"
done
}
#}}}

#--------------#
# RESTORE FILE #
#--------------#{{{
_restore_(){
(\ls $_TINFO_/* &> /dev/null) || {
    _msg_ "${_name_^}: Trash [EMPTY]"
   exit 2
}

read LINES COLUMNS < <(stty size)

[ -z "$1" ] && {
	DIALOG_TTY=1
	_RF_=$(eval "dialog --stdout --title 'Brash Restore' --checklist 'Pick Files (Accept Multiple) :' $LINES $COLUMNS $(($LINES - 8)) $(_list_files_)")
} || {
	_RF_="${_list_[@]:$_all_}"
}

[ -n "$_RF_" ] && {
	for i in ${_RF_[@]}; do
		local _file_=$(awk -F = '/^PATH=/{print $2}' "$_TINFO_/$i.trashinfo")

		test -f "$_file_" && _file_="$_file_.old"

		\mv -fi "$_TFILES_/$i $_file_" && \rm -f "$_TINFO_/$i.trashinfo"

		[ "$_VERBOSE_" = "true" ] && _msg_ "${_name_^} Restore '$_file_'"
	done
}
}
#}}}

#-------------#
# TRASH SIZE  #
#-------------#
_size_(){
    local size count

    read size < <(\du -hc "$_TRASH_"/* | awk '/total$/{print $1}')
    read count < <(\ls -1 "$_TRASH_"/* | wc -l)

    _msg_ "${_name_^} Size [$size], Files [$count]"
}


#-------------#
# HELP DIALOG #
#-------------#{{{
_help_(){
cat <<- HELP
${_name_^^} Cli Trash Manager in bure Bash

$_name_ [OPTS] [FILES]

OPTS :
  -d | --delete  : Delete File and Directories
  -c | --clean   : Clean Trash Files and Infos
  -l | --list    : List Trash Files
  -r | --restore : Restore Files from trash
  -s | --size    : Trash Size
  -v | --verbose : Verboe messages
  -h | --help    : Print help usage

NOTE :
	- File or Dirs Start with '-' can not be removed (Working on it)
HELP
}
#}}}

#---------------#
# MAIN FUNCTION #
#---------------#{{{
_main_(){
case "$1" in
	-d|--delete )
		_mk_trash_
		_REMOVE_="true"
		[ "$2" = "-v" -o "$2" = "--verbose" ] && {
			_VERBOSE_="true" _all_="2"
		} || {
			_all_="1"
		}
		;;
	-l|--list )
		_LIST_="true"
		;;
	-c|--clean )
		_CLEAN_="true"
		;;
	-r|--restore )
		_RESTORE_="true"
		[ "$2" = "-v" -o "$2" = "--verbose" ] && {
			_VERBOSE_="true" _all_="2"
		} || {
			_all_="1"
		}
		;;
    -s|--size )
        _SIZE_="true"
        ;;
	-h|--help )
		_help_
		;;
	* )
		_msg_ "${_name_^}: invalide argument, please see (-h|--help) for more information"
		exit 1
		;;
esac
}
#}}}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#{{{
# this the only way i found to deal with spaces inside filename
for i in "$@"; { _list_+=( "$i" ) ;}
_main_ $@
#}}}

#---------------#
# DETECT ERRORS #
#---------------#{{{
[ -n "$_REMOVE_" ]  && _remove_
[ -n "$_LIST_" ]    && _list_
[ -n "$_CLEAN_" ]   && _clean_
[ -n "$_RESTORE_" ] && _restore_
[ -n "$_SIZE_" ]    && _size_
#}}}

