#!/usr/bin/env bash

#--------#
# DEBUG  #
#--------#{{{
#set -e -x -v
#}}}

#-------------#
# SCRIPT NAME #
#-------------#{{{
name=${0##*/}
#}}}

#----------------#
# TARSH LOCATION #
#----------------#{{{
# get Trash variable from Devices
while read -ra part ; do
	type="${part[1]}"
	uuid="${part[2]}"
	mount="${part[3]}"

	[ "$type" = "part" ] && [ -z "$(awk '/'"$uuid"'/' /etc/fstab)" ] && [ "$mount" ] && {
		case "$PWD" in
			${mount}* ) TRASH="$mount/.Trash" ;;
		esac
	}
done < <(lsblk -ln -o path,type,uuid,mountpoint)
#}}}

#---------------#
# TRASH FOLDERS #
#---------------#{{{
TRASH=${TRASH:=$HOME/.local/share/Trash}
TRASH_FILES="$TRASH/files"
TRASH_INFO="$TRASH/info"
#}}}

#------------------#
# MAKE TRASH FILES #
#------------------#{{{
[ -d "$TRASH_FILES" ]  || mkdir -p "$TRASH_FILES"
[ -d "$TRASH_INFO" ]   || mkdir -p "$TRASH_INFO"
#}}}

#-------------#
# MSG DIALOG  #
#-------------#{{{
msg(){ printf "%s: %b\n" "${name^}" "$@" >&2 ;}
#}}}

#-----------#
# ERROR MSG #
#-----------#{{{
die(){ printf "%s: %b\n" "${name^}" "$@" >&2 ; exit 2 ;}
#}}}

#-------------#
# REMOVE FILE #
#-------------#{{{
remove(){
local i I

[ "${_list_[*]}" ] || die "missing file operand \ntry '$name -h' for more information."

for i in "${_list_[@]}" ; do
	local _file_=${i##*/}
	local _path_=$(realpath -s -- "$i" 2> /dev/null)
	local _file_name_=${_path_##*/}
	local _file_path_=${_path_%/*}
    local size count

    # check for file existing
    [ -e "$_file_" ] || die "$_file_: No such file or Directory."

    # check for file permission
    [ -w "$_file_" ] || die "Can't Delete '$_file_' Permission denied"

    # get file size
    read -ra size < <(du -hs "$_file_" 2> /dev/null)

    # get count if there is any double
    read -r count < <(ls -1v $TRASH_FILES/${_file_name_}* 2> /dev/null | awk -F '[()]' '{line=$2}END{print line}')

    [ "$count" ] && {
        ((count++))
        _file_name_="${_file_name_}(${count})"
    } || {
        [ -e "$TRASH_FILES/$_file_name_" ] && _file_name_="${_file_name_}(1)"
    }

    ( mv -f -- "$_file_" "$TRASH_FILES/$_file_name_" 2> /dev/null ) && {
        printf "[Trash Info]\n"                    > "$TRASH_INFO/$_file_name_.trashinfo"
        printf "DeletionDate=%(%F)TT%(%T)T\n"     >> "$TRASH_INFO/$_file_name_.trashinfo"
        printf "PATH=%s\n" "$_file_path_/$_file_" >> "$TRASH_INFO/$_file_name_.trashinfo"
    } || die "Delele [ERROR] '$_file_'"

    [ "$VERBOSE" ] && msg "Delete [$size] '$_file_'"
    [ "$WAIT" ] && [ $WAIT -eq $WAIT ] 2> /dev/null && sleep $WAIT
done
}
#}}}

#------------#
# LIST FILES #
#------------#{{{
list(){
(ls $TRASH_INFO/* &> /dev/null) || die "Trash [EMPTY]"

[ "$LIST" != "true" ] && {
	(date -d "$LIST" +%Y-%m-%d\ %H:%M:%S &> /dev/null) || die "invalid date '$LIST'. \nTry: '$name -h' for more informations."
}

local date file
for i in $TRASH_INFO/* ; do
	read -r file < <(awk -F = '/^PATH=/{print $2}' "$i")
	read -r date < <(awk -F = '/^DeletionDate=/{sub("T"," ",$2); print $2}' "$i")

	if [[ $date =~ $LIST ]]; then 
		msg "List [$date] '$file'"
	elif [ "$LIST" = "true" ]; then 
		msg "List [$date] '$file'"
	fi
done
}
#}}}

#-------------#
# CLEAN TRASH #
#-------------#{{{
clean(){
(ls $TRASH_INFO/* &> /dev/null) || die "Trash [EMPTY]"

[ "$CLEAN" != "true" ] && {
	(date -d "$LIST" +%Y-%m-%d\ %H:%M:%S &> /dev/null) || die "invalid date '$LIST'. \nTry: '$name -h' for more informations."
}

local date file info
for i in $TRASH_INFO/* ; do
	read -r date < <(awk -F = '/^DeletionDate=/{sub("T"," ",$2); print $2}' "$i")
	info=${i##*/}
	file=${info%.*}

	if [[ $date =~ $CLEAN ]]; then
		msg "Clean [INFO] [FILE] '$file'"
		rm -rf -- $TRASH_INFO/$info $TRASH_FILES/$file
	elif [ "$CLEAN" = "true" ]; then
		msg "Clean all [INFO] [FILES]"
		rm -rf -- $TRASH_INFO/* $TRASH_FILES/*
		break 
	fi
done
}
#}}}

#------------------------------#
# LIST FILES FOR BRASH RETORE  #
#------------------------------#{{{
_list_files_(){
for i in $TRASH_INFO/* ; do
	local _file_=$(awk -F = '/^PATH=/{print $2}' "$i")
	local _date_=$(awk -F = '/^DeletionDate=/{sub("T"," ",$2); print $2}' "$i")
	i=${i##*/}
    printf "'%s' '%s' OFF " "${i%.*}" "$_file_ $_date_"
done
}
#}}}

#--------------#
# RESTORE FILE #
#--------------#{{{
restore(){
(ls $TRASH_INFO/* &> /dev/null) || die "Trash [EMPTY]"

if (date -d "$RESTORE" +%Y-%m-%d\ %H:%M:%S &> /dev/null) ;then 
else
	die "invalid date '$RESTORE'. \nTry: '$name -h' for more informations."
fi

local RF="${_list_[@]}"
[ "$RF" ] && {
	for i in ${_RF_[@]}; do
		local _file_=$(awk -F = '/^PATH=/{print $2}' "$TRASH_INFO/$i.trashinfo")

        [ -w "$TRASH_INFO/$i" ] || die "Can't Restore '$_file_' Permission denied"

        [ -f "$_file_" ] && _file_="${_file_}(1)"

		mv -f -- "$TRASH_FILES/$i" "$_file_" 2> /dev/null
        rm -f -- "$TRASH_INFO/$i.trashinfo"  2> /dev/null

		[ "$VERBOSE" ] && msg "Restore '$_file_'"
	done
} || {
	read -r LINES COLUMNS < <(stty size)
	read -r RF < <(dialog --stdout --title "Brash Restore" --checklist "Pick Files (Accept Multiple) :" $LINES $COLUMNS $(($LINES - 8)) $(_list_files_))
}
}
#}}}

#-------------#
# TRASH SIZE  #
#-------------#{{{
size(){
    local size count

    read -r size < <(du -hcs $TRASH_FILES | awk '/total$/{print $1}')
    read -r count < <(ls -1 $TRASH_FILES | wc -l)

    msg "Size [$size], Files [$count]"
}
#}}}

#-------------#
# HELP DIALOG #
#-------------#{{{
help(){
while read; do
    printf "%s\n" "$REPLY"
done <<- HELP
${name^^} Cli Trash Manager in bure Bash

$name [OPTS] [FILES]

OPTS :
	-d <FILES> : Delete File and Directories
	-c <DATE>  : Clean Trash Files and Infos. 	Accept (Date Or leave it Empty)
	-l <DATE>  : List Trash Files. 				Accept (Date Or leave it Empty)
	-r <FILES> : Restore Files from trash. 		Accept (Files,Date Or leave it Empty)
	-s         : Trash Size
	-w <NUM>   : Wait before delete the next file in Seconds
  	-v         : Explain what is being done
  	-h         : Display this help text and exit

NOTE: 
	Valide date and time : YYYY-MM-DD HH:MM:SS
HELP

exit 0
}
#}}}

#---------------#
# MAIN FUNCTION #
#---------------#{{{
main(){
while getopts ":dlcrsvw:h" OPT ; do
    case "$OPT" in
        d )
            REMOVE=true
			action+=( $OPT )
            ;;
        l )
			local date=$(eval "echo \$${OPTIND}")
			[[ $date =~ ^-.* || -z "$date" ]] && LIST="true" || LIST="$date"
			action+=( $OPT )
            ;;
        c )
			local date=$(eval "echo \$$OPTIND")
			[[ $date =~ ^-.* || -z "$date" ]] && CLEAN="true" || CLEAN="$date"
			action+=( $OPT )
            ;;
        r )
			local date=$(eval "echo \$$OPTIND")
			[[ $date =~ ^-.* || -z "$date" ]] && RESTORE="true" || RESTORE="$date"
			action+=( $OPT )
            ;;
        s )
            SIZE=true
			action+=( $OPT )
            ;;
        h )
            HELP=true
			action+=( $OPT )
            ;;
        v )
            VERBOSE=true
            ;;
        w )
            WAIT="${OPTARG}"
            ;;
        * )
            die "invalid option -- '$OPTARG' \nTry '$name -h' for more information"
            ;;
        : )
			die "option requires an argument -- '$OPTARG' \nTry '$name -h' for more information."
            ;;
    esac

done

shift $(($OPTIND - 1))

# get all files even with spaces
while read ; do
    _list_+=( "$REPLY" )
done < <(printf "%s\n" "$@")
}
#}}}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#{{{
main "$@"
#}}}

#---------------#
# DETECT ERRORS #
#---------------#{{{
[ ${#action[@]} -gt 1 ] && die "only one operation may be used at a time. \nTry: '$name -h' for more information"
[ "$HELP" ]    	&& help      || true
[ "$REMOVE" ]  	&& remove    || true
[ "$LIST" ]    	&& list      || true
[ "$CLEAN" ]   	&& clean     || true
[ "$RESTORE" ] 	&& restore   || true
[ "$SIZE" ]    	&& size      || true
#}}}

